
public class MultiThreadExample {
  public static void main(String[] args) {
    // create two threads
    Thread thread1 = new MyThread("Thread 1");
    Thread thread2 = new MyThread("Thread 2");

    // start the threads
    thread1.start();
    thread2.start();
  }

  static class MyThread extends Thread {
    private final String name;

    public MyThread(String name) {
      this.name = name;
    }

    public void run() {
      for (int i = 0; i < 5; i++) {
        System.out.println(name + ": " + i);
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}
In this example, we create two threads by extending the Thread class and overriding its run() method. 
We then create an instance of each thread and start them using the start() method.

In the run() method, we simply print the name of the thread and a number from 0 to 4, sleep for one second, and repeat the process. 
Since we're running two threads concurrently, the output will be interleaved and not necessarily in order.

Using Runnable interface

public class MultiThreadExample {
  public static void main(String[] args) {
    // create an instance of the class
    MyRunnable myRunnable = new MyRunnable();

    // create two threads and pass the instance to them
    Thread thread1 = new Thread(myRunnable, "Thread 1");
    Thread thread2 = new Thread(myRunnable, "Thread 2");

    // start the threads
    thread1.start();
    thread2.start();
  }

  static class MyRunnable implements Runnable {
    public void run() {
      method1();
      method2();
    }

    public void method1() {
      for (int i = 0; i < 5; i++) {
        System.out.println(Thread.currentThread().getName() + " method1: " + i);
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }

    public void method2() {
      for (int i = 0; i < 5; i++) {
        System.out.println(Thread.currentThread().getName() + " method2: " + i);
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
}
In this example, we create an instance of the MyRunnable class, which implements the Runnable interface. We then create two threads and pass the same instance of MyRunnable to them.

In the run() method of MyRunnable, we call method1() and method2(), which will be executed by the two threads concurrently.
In each method, we simply print the name of the thread, the method name, and a number from 0 to 4, sleep for one second, and repeat the process.

Since we're using the same instance of MyRunnable for both threads, the output will be interleaved and not necessarily in order.

Join() & syncronized
public class ThreadJoinAndSynchronizedExample {
  public static void main(String[] args) throws InterruptedException {
    // create an instance of the class
    MyRunnable myRunnable = new MyRunnable();

    // create two threads and pass the same instance to them
    Thread thread1 = new Thread(myRunnable, "Thread 1");
    Thread thread2 = new Thread(myRunnable, "Thread 2");

    // start the threads
    thread1.start();
    thread2.start();

    // wait for both threads to complete
    thread1.join();
    thread2.join();

    // print the final value of the counter
    System.out.println("Final counter value: " + myRunnable.getCounter());
  }

  static class MyRunnable implements Runnable {
    private int counter = 0;

    public void run() {
      for (int i = 0; i < 5; i++) {
        incrementCounter();
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
      }
    }

    public synchronized void incrementCounter() {
      counter++;
      System.out.println(Thread.currentThread().getName() + " incremented counter to " + counter);
    }

    public int getCounter() {
      return counter;
    }
  }
}
In this example, we create an instance of MyRunnable, which implements the Runnable interface. 
We then create two threads and pass the same instance of MyRunnable to them.

Each thread executes the run() method, which calls the incrementCounter() method five times, sleeping for one second between each increment. 
The incrementCounter() method is synchronized, which means that only one thread can execute it at a time. This ensures that the counter variable is incremented correctly and avoids race conditions.

After starting both threads, we use the join() method to wait for both threads to complete before printing the final value of the counter variable.
Thread 1 incremented counter to 1
Thread 1 incremented counter to 2
Thread 2 incremented counter to 3
Thread 1 incremented counter to 4
Thread 2 incremented counter to 5
Thread 1 incremented counter to 6
Thread 2 incremented counter to 7
Thread 1 incremented counter to 8
Thread 2 incremented counter to 9
Thread 1 incremented counter to 10
Final counter value: 10
Notice that the threads produce interleaved output, but the final value of the counter variable is always 10, which is the expected result.
This is because we used the synchronized keyword to ensure that only one thread could execute the incrementCounter() method at a time.
If we didn't use synchronized, the final value of counter would likely be less than 10 due to race conditions.

wait() & notify()
In Java, the notify() method is used to wake up a single thread that is waiting on the same object's monitor. The notifyAll() method is used to wake up all threads that are waiting on the same object's monitor.

Here's an example of how to use notify() in a Java program:
public class ThreadNotifyExample {
  public static void main(String[] args) throws InterruptedException {
    Object lock = new Object(); // create an object to use as a lock

    Thread thread1 = new Thread(() -> {
      synchronized (lock) {
        System.out.println(Thread.currentThread().getName() + " started.");
        try {
          lock.wait(); // wait for notification
        } catch (InterruptedException e) {
          e.printStackTrace();
        }
        System.out.println(Thread.currentThread().getName() + " finished.");
      }
    }, "Thread 1");

    Thread thread2 = new Thread(() -> {
      synchronized (lock) {
        System.out.println(Thread.currentThread().getName() + " started.");
        System.out.println(Thread.currentThread().getName() + " notifying.");
        lock.notify(); // notify waiting thread
        System.out.println(Thread.currentThread().getName() + " finished.");
      }
    }, "Thread 2");

    thread1.start();
    Thread.sleep(1000); // sleep for a bit to ensure thread1 is waiting
    thread2.start();

    thread1.join();
    thread2.join();
  }
}

In this example, we create two threads, thread1 and thread2, and an object lock to use as a lock. thread1 waits for notification from thread2 before finishing.

When thread1 starts, it enters a synchronized block using lock as the lock. It then prints a message to indicate that it has started and waits for notification by calling lock.wait(). This releases the lock on lock and causes thread1 to wait until it is notified.

When thread2 starts, it also enters a synchronized block using lock as the lock. It prints a message to indicate that it has started, then calls lock.notify() to wake up any thread waiting on lock. Since thread1 is the only thread waiting on lock, it is the thread that will be woken up. thread2 then finishes.

thread1 wakes up from its wait state and prints a message to indicate that it has finished. The program then ends.

When you run this program, you should see output like the following:
Thread 1 started.
Thread 2 started.
Thread 2 notifying.
Thread 1 finished.

Notice that thread1 starts first and waits for notification from thread2. thread2 then starts and wakes up thread1 by calling lock.notify(). thread1 then finishes.
