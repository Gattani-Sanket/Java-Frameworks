
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class FileHandlingExample {

    public static void main(String[] args) {
        File file = new File("example.txt");

        // create a new file if it doesn't exist
        try {
            if (file.createNewFile()) {
                System.out.println("New file created: " + file.getName());
            } else {
                System.out.println("File already exists.");
            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

        // write to the file
        try {
            FileWriter writer = new FileWriter(file);
            writer.write("Hello, world!");
            writer.close();
            System.out.println("Successfully wrote to the file.");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

        // read from the file
        try {
            Scanner reader = new Scanner(file);
            while (reader.hasNextLine()) {
                String data = reader.nextLine();
                System.out.println(data);
            }
            reader.close();
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

        // delete the file
        if (file.delete()) {
            System.out.println("File deleted: " + file.getName());
        } else {
            System.out.println("Failed to delete the file.");
        }
    }
}

########## How to write and read objects in file
import java.io.*;

public class ObjectFileExample {
    public static void main(String[] args) {
        // create a Student object
        Student student = new Student("John", "Doe", 20);

        // write the object to a file
        try {
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("student.dat"));
            out.writeObject(student);
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        // read the object from the file
        try {
            ObjectInputStream in = new ObjectInputStream(new FileInputStream("student.dat"));
            Student readStudent = (Student) in.readObject();
            in.close();

            System.out.println("Name: " + readStudent.getFirstName() + " " + readStudent.getLastName());
            System.out.println("Age: " + readStudent.getAge());
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}

class Student implements Serializable {
    private String firstName;
    private String lastName;
    private int age;

    public Student(String firstName, String lastName, int age) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public int getAge() {
        return age;
    }
}

This program defines a Student class that implements the Serializable interface, indicating that objects of this class can be written to 
and read from streams. The program then creates a Student object and writes it to a file called "student.dat" using an ObjectOutputStream.

To read the object from the file, the program creates an ObjectInputStream and reads the object from the file. 
The readObject method returns an Object, so we need to cast it to a Student object. Finally, the program prints out the properties 
of the Student object that was read from the file.

Note that when writing objects to a file, you need to make sure that the objects are serializable.
If an object is not serializable, you will get a NotSerializableException at runtime.


###what will happen if student class does not implement serializable in above code?


If the Student class in the previous example does not implement the Serializable interface, then trying to write a Student object to a file using an ObjectOutputStream will result in a NotSerializableException at runtime.

The Serializable interface is a marker interface, which means it does not have any methods that need to be implemented. Instead, it indicates to the Java runtime that the class can be serialized, or converted to a byte stream that can be written to a file or sent over a network.

If a class does not implement Serializable, then the Java runtime will not allow instances of that class to be serialized or deserialized. When an attempt is made to serialize an object of a class that does not implement Serializable, a NotSerializableException will be thrown at runtime. This exception indicates that the object cannot be serialized and that the programmer needs to either make the class implement Serializable or find a different way to persist the object's data.

In short, if the Student class does not implement Serializable, the program will throw a NotSerializableException when trying to write a Student object to a file using an ObjectOutputStream.
