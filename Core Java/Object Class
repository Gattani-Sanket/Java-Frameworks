Object Class


In Java, an object class is the parent class of all classes in Java. It provides some common methods and properties that are inherited by all Java classes. Some of the commonly used methods of the object class are toString(), equals(), and hashCode().

The toString() method is used to return a string representation of an object. By default, this method returns the class name followed by an @ sign and the hash code of the object. However, this method can be overridden to return a custom string representation of an object.

The equals() method is used to compare two objects for equality. By default, this method compares the memory addresses of two objects. However, this method can be overridden to compare the content of two objects.

Here's an example of overriding the toString() and equals() methods in a custom class:
public class Person {
    private String name;
    private int age;
 
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
 
    @Override
    public String toString() {
        return "Person [name=" + name + ", age=" + age + "]";
    }
 
    @Override
    public boolean equals(Object obj) {
        if (obj == this)
            return true;
 
        if (!(obj instanceof Person))
            return false;
 
        Person p = (Person) obj;
        return name.equals(p.name) && age == p.age;
    }
}

In this example, we have a Person class with two private fields name and age. We have overridden the toString() method to return a custom string representation of the Person object. We have also overridden the equals() method to compare the Person objects based on their name and age fields.

Now, let's create two Person objects and compare them using the equals() method:
Person p1 = new Person("John", 30);
Person p2 = new Person("John", 30);

System.out.println(p1.equals(p2)); // true

In this example, the equals() method returns true because both Person objects have the same name and age fields.
