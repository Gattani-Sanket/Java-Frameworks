Abstract

abstract class is a class that cannot be instantiated on its own and serves as a blueprint for other classes to inherit from. 
Abstract classes are marked with the keyword "abstract" in their class declaration.
Abstract classes can have both concrete methods (i.e., methods with an implementation) and abstract methods (i.e., methods without an implementation). Abstract methods are declared without a body and marked with the keyword "abstract". They must be implemented by any non-abstract subclass that inherits from the abstract class.

Here is an example of an abstract class with an abstract method:
public abstract class Animal {
    public abstract void makeSound();
}

public class Dog extends Animal {
    public void makeSound() {
        System.out.println("Woof!");
    }
}


a class can contain abstract methods. In fact, in order for a class to be declared as abstract, it must contain at least one abstract method. 
An abstract method is a method that is declared without a body and marked with the "abstract" keyword.

Here is an example of an abstract class with an abstract method:
public abstract class Shape {
    public abstract double area();
}
In this example, the Shape class has an abstract method called "area". Any non-abstract subclass that inherits from Shape must provide an implementation 
for the area method. 
For example:
public class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double area() {
        return Math.PI * radius * radius;
    }
}

Note that if a class contains an abstract method, it must be declared as abstract using the "abstract" keyword. 
Conversely, an abstract class can also contain non-abstract (i.e., concrete) methods, which have a body and provide a default 
implementation that can be inherited by subclasses.
